---
  - name: Display the JSON file content
    shell: cat /root/openstack/ansible-middleware/jsonAnsible/tasks/openstack-vm-prov.json
    register: result

  - name: save the Json data to a Variable as a Fact
    set_fact:
      jsondata: "{{ result.stdout | from_json }}"

# setting server name

  - name: set name of server
    set_fact:
      server_name: "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: 'server.name'
  - debug:
       var: server_name

# setting network id

  - name: set network uuid
    set_fact:
      network_uuid:  "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: '*.networks[*].uuid'
  - debug:
       var: network_uuid

# breaking network uuid to pass in nic tag

  - name: join network uuid
    set_fact:
       string_uuid: "{{ network_uuid | join(' ') }}"
       net_tag: "net-id="

  - name: final network uuid
    set_fact:
       net_id: "{{ net_tag + string_uuid | join(',net-id=') }}"
  - debug:
       var: net_id #final network id to provide

# setting network port name

  - name: set network port
    set_fact:
      network_ports:  "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: '*.ports[*].name'
  - debug:
       var: network_ports

#  converting to string format and adding port-name tag

  - name: convert to string format
    set_fact:
       port_name: "{{ network_ports | join(' ') }}"
       port_tag: "port-name="

  - name: final network port name
    set_fact:
       add_tag: "{{ port_tag + port_name | join(',port-name=') }}"
  - set_fact:
      ports: "{{ port_name if (port_name == '') else add_tag }}"
  - debug:
       var: ports

# setting security group

  - name: set security group
    set_fact:
      security_name:  "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: '*.security_groups[*].name'

# joining strings

  - name: joining security group names
    set_fact:
       sec: "{{ security_name | join('') }}"

  - set_fact:
       sec_names: "{{ sec | join(',') }}"

  - debug:
       var: sec_names

# setting volume names

  - name: set volumes name
    set_fact:
      volume_name:  "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: '*.volumes[*].name'

  - name: joining volumes name
    set_fact:
       pre_volume: "{{ volume_name | join(' ') }}"

  - name: joined volumes name
    set_fact:
       volumes: "{{ pre_volume | join(',') }}"
  - debug:
       var: volumes

# setting metadata 

  - name: set meta hostname
    set_fact:
       hostname: "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: 'server.meta.hostname'
  - debug:
       var: hostname

# setting flavor id

  - name: set flavor id
    set_fact:
      flavor_id: "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: 'server.flavor'
  - debug:
       var: flavor_id

# setting image id

  - name: set image id
    set_fact:
      image_id: "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: 'server.image'
  - debug:
       var: image_id

# setting key pair

  - name: set key pair name
    set_fact:
      key: "{{ jsondata | json_query(jmesquery) }}"
    vars:
      jmesquery: 'server.key_name'
  - debug:
       var: key
           
# setting availability zone

  - name: set availability zone
    set_fact:
      zone: "{{ jsondata | json_query(jmesquery) }}"
    vars:
       jmesquery: 'server.availability_zone'
  - debug:
       var: zone

# setting floating ip

  - name: set floating ip
    set_fact:
      float_ip: "{{ jsondata | json_query(jmesquery) }}"
    vars:
       jmesquery: 'server.auto_ip'
  - debug:
       var: float_ip
